/*
 * Copyright (C) 2014 Indiana University
 * Authors email winfrees at iupui dot edu
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 *
 * @author Seth Winfree <Seth Winfree at Indiana University>
 */

/**
 * Time_LUT is a postprocessing plugin for modifying datasets generated by
 * Trackmate. It converts an RGB single color track image with no backward or
 * forward traces to a progressive 256 value LUT that is normalized to the total
 * time.
 * 
 * This is a stop gap measure until a LUT adjustment functionality is built into 
 * TrackMate.  According to the changelog and open issues 
 * at: https://github.com/fiji/TrackMate/  this seems imminent
 */

package TrkPP;

import ij.IJ;
import ij.ImagePlus;
import ij.ImageStack;
import ij.plugin.filter.PlugInFilter;
import static ij.plugin.filter.PlugInFilter.DOES_8G;
import static ij.plugin.filter.PlugInFilter.DOES_ALL;
import ij.process.ImageConverter;
import ij.process.ImageProcessor;



public class Time_LUT implements PlugInFilter {
ImagePlus imp;

@Override
	public int setup(String arg, ImagePlus imp) {
		this.imp = imp;
                new ImageConverter(this.imp).convertToGray8();
		return DOES_8G;
	}

@Override
	public void run(ImageProcessor ip) {
		ImageStack is;
		is = this.imp.getStack();
		float length = (float)is.getSize();	
		float increment = (255/length)/168;
                
                //normalizing to 168 as TrackMate Uniform color is 168 as 8 bit
                
		int[][] arr1;
		int[][] arr2;
		int[][] arr3 = new int[is.getWidth()][is.getHeight()];		
		for(int i = 1; i <= is.getSize(); i++){
			is.getProcessor(i).multiply(increment);			
			arr1 = is.getProcessor(i).getIntArray();			
			if(i > 1){					
      					arr2 = is.getProcessor(i-1).getIntArray();      					
				    for(int x = 0; x < is.getWidth()-1; x++) {  
					for(int y = 0; y < is.getHeight()-1; y++) {
						if(arr1[x][y] == 0){arr1[x][y] = arr2[x][y];}	 
						}	
    				}  
                        is.getProcessor(i).setIntArray(arr1);

			}else {is.getProcessor(i).setIntArray(arr1);
			}
                        increment = (((255/length)/168)*i);
		}
		for(int i = 1; i <= is.getSize(); i++){
		is.getProcessor(i).gamma(0.45);}
	}
}
